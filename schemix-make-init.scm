(define *cache* '())
(define *gensym-counter* 0)

(define (compiled-name datum) (caadr datum))
(define (initialiser datum) (cadadr datum))

(define (compile-datum exp)
  (cond ((not (assoc exp *cache*))
	 (letrec ((str (if (number? exp) (number->string exp) (symbol->string exp)))
		  (fun (if (number? exp) "mk_integer" "mk_symbol"))
		  (delim (if (number? exp) "" "\""))
		  (compiled-name (string-append "_DATUM_" (number->string *gensym-counter*)))
		  (initialiser (string-append fun "( sc, " delim str delim " )")))
	   (set! *cache* (cons `(,exp (,compiled-name ,initialiser)) *cache*))
	   (set! *gensym-counter* (+ *gensym-counter* 1)))))
  (compiled-name (assoc exp *cache*)))

(define (scheme2c exp)
  (cond ((null? exp)
	 "sc->NIL")
	((equal? exp #t)
	 "sc->T")
	((equal? exp #f)
	 "sc->F")
	((pair? exp)
	 (string-append "cons( sc, "
			(scheme2c (car exp))
			", "
			(scheme2c (cdr exp))
			" )"))
	((or (symbol? exp) (number? exp))
	 (compile-datum exp))
	((string? exp)
	 (string-append "mk_string( sc, \""
			exp
			"\" )"))
	(else
	 (newline)
	 (newline)
	 (newline)
	 (display "Unknown object in schemix-init.scm: ")
	 (write exp)
	 (newline)
	 (newline)
	 (newline)
	 "UNKNOWN OBJECT")))

(define (parse-input x)
  (cond ((eof-object? x)
	 #t)
	((and (list? x)
	      (equal? (car x) 'define)
	      (not (null? (cdr x)))
	      (not (null? (cddr x))))
	 (cond ((symbol? (cadr x))
		(display "/* Definition of ")
		(display (cadr x))
		(display " */")
		(newline)
		(display "define( sc, sc->global_env, ")
		(display (scheme2c (cadr x)))
		(display ", ")
		(display (scheme2c (caddr x)))
		(display " );")
		(newline)
		(newline)
		(parse-input (read)))
	       ((pair? (cadr x))
		(parse-input
		 `(define ,(caadr x) (lambda ,(cdadr x) ,@(cddr x)))))))
	(else
	 (display "/* Evaluation of ")
	 (write x)
	 (display " */")
	 (newline)
	 (display "eval( sc, ")
	 (display (scheme2c x))
	 (display " );")
	 (newline)
	 (newline)
	 (parse-input (read)))))

(with-output-to-file "schemix-init.c"
  (lambda ()
    (with-input-from-file "schemix-init.scm"
      (lambda ()
	(display "/* THIS FILE WAS AUTOGENERATED FROM schemix-init.scm")
	(newline)
	(display "   BY THE 'schemix-make-init' PROGRAM")
	(newline)
	(display "   YOU SHOULD NOT EDIT IT BY HAND!")
	(newline)
	(newline)
	(display "   To regenerate this file from its source, you should")
	(newline)
	(display "   run the schemix-make-init program.")
	(newline)
	(display "   On most systems you can do this by typing")
	(newline)
	(display "   'scheme' at a bash prompt and then typing")
	(newline)
	(display "   '(load \"schemix-make-init.scm\")'")
	(newline)
	(display "   at the scheme prompt. */")
	(newline)
	(newline)
	(newline)
	(newline)
	(parse-input (read))))))

(with-output-to-file "schemix-pre-init.c"
  (lambda ()
    (map (lambda (x)
	   (display "pointer ")
	   (display (compiled-name x))
	   (display " = ")
	   (display (initialiser x))
	   (display ";")
	   (newline))
	 *cache*)
    #t)) ;; Success!
